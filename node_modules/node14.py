#%%[markdown]
# # Quiz 4 - Models
# 
# You may use web search, notes, etc. 
# Do not use help from another human. 
# 
 
#%%
import numpy as np
import pandas as pd
import rfit
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn import metrics
df = rfit.dfapi('USDANutrient', ind_col_name="ID")
df = df.iloc[ :, 0:29 ]
df.info()


#%%
# part (a) Model1 - sklearn
# 
# Use train-test split (4:1 split, random_state=321) and sklearn LinearRegression, 
# build a linear model for 'Energy_kcal', with 5 or 6 regressors. Use your best 
# judgement at this point to decide on what regressors to choose. 
# 
# Find the intercept and the coefficients of the model. And score the model using 
# both the train set and the test set.
# 
# 

Y = df['Energy_kcal']
X = df[['FoodGroup', 'ShortDescrip', 'Descrip', 'CommonName', 'MfgName',
       'ScientificName', 'Protein_g', 'Fat_g', 'Carb_g',
       'Sugar_g', 'Fiber_g', 'VitA_mcg', 'VitB6_mg', 'VitB12_mcg', 'VitC_mg',
       'VitE_mg', 'Folate_mcg', 'Niacin_mg', 'Riboflavin_mg', 'Thiamin_mg',
       'Calcium_mg', 'Copper_mcg', 'Iron_mg', 'Magnesium_mg', 'Manganese_mg',
       'Phosphorus_mg', 'Selenium_mcg', 'Zinc_mg']]
X = pd.get_dummies(X)

X_train, X_test,y_train, y_test = train_test_split(X,Y , random_state=321,test_size=0.20)



lr = linear_model.LinearRegression()
lr.fit(X_train[['Protein_g', 'Fat_g', 'Carb_g','Sugar_g', 'Fiber_g']], y_train)
y_pred = lr.predict(X_test[['Protein_g', 'Fat_g', 'Carb_g','Sugar_g', 'Fiber_g']])
rootMeanSqErr = np.sqrt(metrics.mean_squared_error(y_test, y_pred))
rootMeanSqErr


print("Intercept:", lr.intercept_,)
print("Coefficients:",lr.coef_,)
print("R^2:",lr.score(X[['Protein_g', 'Fat_g', 'Carb_g','Sugar_g', 'Fiber_g']], Y))


print("Train RMSE:", np.sqrt(metrics.mean_squared_error(y_train, lr.predict(X_train[['Protein_g', 'Fat_g', 'Carb_g','Sugar_g', 'Fiber_g']]))))
print("Test RMSE:", np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test[['Protein_g', 'Fat_g', 'Carb_g','Sugar_g', 'Fiber_g']]))))


#%%
# part (b) Model1 - statsmodels
# 
# Use statsmodels OLS to build the same model, using the same training data set from part (a). 
# You might consider using the pd.merge() function to obtain the proper dataframe, like a table join.
# Print this Statsmodels model summary.
# 
# 
import statsmodels.formula.api as smf
train_df = X_train.copy(deep = True)
train_df['Energy_kcal'] = y_train

test_df = X_test.copy(deep = True)
test_df['Energy_kcal'] = y_test

model = smf.ols(formula="Energy_kcal ~ Protein_g + Fat_g + Carb_g + Sugar_g + Fiber_g", data=train_df).fit()
print(model.summary())

#%%
# part (c) Model2 - statsmodels 
# From the previous result, we should drop the regressor with coefficients of high p-value. 
# Do that and build a model2 under statsmodels. Keep the same train-test split. Do not re-create 
# a new splitting, so we can compare things in no ambiguous terms. 
# 
# You might consider using the .drop() function in dataframes to do that.
# Print out the new summary of the model.
# 
# 
model_2 = smf.ols(formula="Energy_kcal ~ Protein_g + Fat_g + Carb_g + Fiber_g", data=train_df).fit()
print(model_2.summary())


#%%
# part (d) Model2 - sklearn
# Now with this modified set of regressors, build model2 
# with sklearn LinearRegression again. As before, do not re-create a new 
# train-test split. Use the original split, with the right variables. 
# 
# Find the intercept and the coefficients of the model. And score the model using 
# both the train set and the test set.
# 
lr_2 = linear_model.LinearRegression()
lr_2.fit(X_train[['Protein_g', 'Fat_g', 'Carb_g', 'Fiber_g']], y_train)
y_pred = lr_2.predict(X_test[['Protein_g', 'Fat_g', 'Carb_g', 'Fiber_g']])


print("Intercept:", lr_2.intercept_,)
print("Coefficients:",lr_2.coef_,)
print("R^2:",lr_2.score(X[['Protein_g', 'Fat_g', 'Carb_g', 'Fiber_g']], Y))


print("Train RMSE:", np.sqrt(metrics.mean_squared_error(y_train, lr_2.predict(X_train[['Protein_g', 'Fat_g', 'Carb_g', 'Fiber_g']]))))
print("Test RMSE:", np.sqrt(metrics.mean_squared_error(y_test, lr_2.predict(X_test[['Protein_g', 'Fat_g', 'Carb_g', 'Fiber_g']]))))



